- hosts: all
  become: true
  tasks:

  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add the apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add the apt repository for the stable Docker version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install Docker and its dependencies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
    notify:
      - docker status

  - name: Ensure user group exists
    group:
      name: "{{ ansible_user }}"

  - name: Add user to the docker group
    user:
      name: "{{ ansible_user }}"
      groups: docker,{{ ansible_user }}
      append: yes

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add the apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Add the apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
        - kubelet=1.19.16-00
        - kubeadm=1.19.16-00
        - kubectl=1.19.16-00

  - name: Configure --node-ip for kubelet
    lineinfile:
      path: /etc/default/kubelet
      regexp: "^KUBELET_EXTRA_ARGS=.*--node-ip="
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
      create: yes
    register: kubeletconfig

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted
    when: kubeletconfig.changed

- hosts: master
  vars:
    pod_cidr: "10.217.0.0/16"


  tasks:
  - name: Initialize the Kubernetes cluster with kube-proxy
    become: true
    command: kubeadm init --pod-network-cidr={{ pod_cidr }}  --apiserver-advertise-address={{ node_ip }} --apiserver-cert-extra-sans={{ node_ip }}

  - name: Setup kubeconfig
    command: "{{ item }}"
    with_items:
     - mkdir -p "$HOME/.kube"
     - sudo cp /etc/kubernetes/admin.conf "$HOME/.kube/config"
     - sudo chown "{{ ansible_user }}:{{ ansible_user }}" "$HOME/.kube/config"

